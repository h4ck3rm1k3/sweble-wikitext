Article1 <-  Redirect? Content Eof
#Article2 <-  {  }  BolBlockContent &Eof  {  }
Content <-  &HasOnlyIncludeContent    OnlyIncludeContent  / ContentStar
OnlyIncludeContent <- tOnlyIncludeContent 
tOnlyIncludeContent <-  Ignored OnlyIncludeRepeat* ( KwOnlyIncludeOpen ContentStar )?  {  }
OnlyIncludeRepeat <-  KwOnlyIncludeOpen ContentStar KwOnlyIncludeClose Ignored  {  }
Ignored <-  IgnoredString  {  }
IgnoredString <- ( !KwOnlyIncludeOpen _ )* 
KwOnlyIncludeOpen <- "<onlyinclude>" 
KwOnlyIncludeClose <- "</onlyinclude>" 
HasOnlyIncludeContent <-  &{ yyState.isParseForInclusion() }  ( !KwOnlyIncludeOpen  _ )* KwOnlyIncludeOpen  ( !KwOnlyIncludeClose _ )* KwOnlyIncludeClose
ContentStopperOnlyInclude <-  &{ yyState.isHasOnlyInclude() } KwOnlyIncludeClose

TemplateArgumentNamePlus <-  ContentPlus
TemplateNameStar <-  ContentStar
Redirect <-  pWsStar '#' RedirectKeyword pWsStar RedirectLink  {  }
RedirectKeyword <-  [Rr][Ee][Dd][Ii][Rr][Ee][Cc][Tt]
RedirectLink <-  "[[" LinkTargetString RedirectLinkGarbageString? "]]"  {  }
RedirectLinkGarbageString <-  &'|' ( !"]]" _ )*
InternalLink <-    "[[" InternalLinkContentStar "]]"    {    }  / '['    {    }
InternalLinkContentStar <- ContentStar 
ContentStar <-  ContentAtom*  {  }
ContentPlus <- ContentAtom+  {  }
ContentAtom <-  !ContentStopper ContentChoice
ContentStopper <-  ContentStopperOnlyInclude

XmlElement <-  '<'   ( "!--" XmlComment  / '/'   IgnoredClosingTag  /       IgnoredOpeningTag  /       IgnoredElements  /       TagExtension  /       Greater  )
#XmlElement2 <-    "</" XmlElementClose  / '<'  XmlElementOpen  / '<'    {    }
ContentChoice <-    <XmlElement>  &'<'  XmlElement       / <Template>    &"{{" Template         / <IntLink>     &"[[" InternalLink     / <ContentText>       ContentText
ContentText <-  ContentString  {  }
ContentString <-  ( !ContentStringStopper _ )+
TemplateArgumentValueStar <-  ContentStar
Text Greater <- !ValidClosingTag  {  }
XmlComment XmlComment <-    XmlCommentContent "-->"    {    }  / XmlCommentContent Eof    { <-
  ( !"-->" _ )*
IgnoredClosingTag <-  IgnoredTagName IgnoredTagGarbage '>'  {  }
IgnoredOpeningTag <-  IgnoredTagName IgnoredTagGarbage '>'  {  }
IgnoredTagName <-  TagName &{ isIgnoredTag(yyValue) }
IgnoredTagGarbage <-  ( !'>' _ )*
IgnoredElements <-    IgnoredElementHeader    {      getState().setTagExtensionName(header._1)    }    '>' TagBody    {    }  / IgnoredElementHeader "/>"   {    }
IgnoredElementHeader <-  IgnoredElementName IgnoredTagGarbage  {  }
IgnoredElementName <-  TagName &{ isIgnoredElement(yyValue) }
TagExtension <-    TagHeader '>'    {      getState().setTagExtensionName(header._1)    }    TagBody
    {    }  / TagHeader "/>"    {    }
TagHeader <-    ValidTagName &pWsPlus XmlAttributePlus pWsStar    {    }  / ValidTagName pWsStar    {    }
TagBody <-  TagContentStar  (    ValidClosingTag  / Eof    {    }  )  {  }
TagContentStar <-  ( !ValidClosingTag _ )*
ValidClosingTag <-  "</" ClosingTagHeader &{  }  {  }
ClosingTagHeader <-  TagName pWsStar '>'  {  }
ValidTagName <-  TagName &{ isValidExtensionTagName(yyValue) }
TagName <- XmlName 

Braces1Plus <- "{" "{"+ 
TemplateTail <-  TemplateTailPart TemplateTailPart?  {  }
TemplateTailPart <-    TemplateTailPart2 TemplateTailPart3    {    }  / TemplateTailPart2    {    }
TemplateTailPart2 <-  &{ hasAtLeastTemplateBraces(2) } TemplateNameStar TemplateArgumentStar "}}"  {  }
TemplateTailPart3 <-  &{ hasAtLeastTemplateBraces(3) } '}'
TemplateArgumentChoice <-    TemplateArgumentNamePlus '=' TemplateArgumentValueStar    {    }  / TemplateArgumentValueStar    {    }
TemplateArgumentStar <-   (  '|' TemplateArgumentChoice )*  {  }
SemiPreTransient <-  &{  } SemiPreLine ( &slEol SemiPreLine )*  {  }
SemiPreLine SemiPreLine <-  pEol? pTpStar ' ' !OpenOrCloseMatch SemiPreContentStar  {  }
OpenOrCloseMatch <-  pExtSpaceStar '<' '/'?    ( "div" / "hr" / "center" / "pre" / "p" / "blockquote"    / "h1" / "h2" / "h3" / "h4" / "h5" / "h6"    / "table" / "tr" / "td" / "th"    / "ul" / "ol" / "li"    )

Url <- UrlProtocolString ':' UrlPathString &{ isProtocol(protocol, path) }  {  }
UrlProtocolString <- tUrlProtocolString 
UrlPathString <- tUrlPathString 
tUrlProtocolString <-  [A-Za-z] [A-Za-z0-9+\-.]*
tUrlPathString <- "TODO"
#tUrlPathString <-  ( ![\u0000-\u0020] ![\"\[\]<>|\u007F\uE000\u2028\u2029\u0085] _ )+
ListTransient <-  &{ accept(ParserAtoms.LIST) } ListItem ( &slEol ListItem )*  {  }
ListItem <-  pEol? pTpStar ListPrefix ListItemContentStar  {  }
ListPrefix <-    ListPrefixStr ';'?    {    }  / ';'    {    }
ListPrefixStr <-  [*#:]+

TableAttributeInlineStar <- XmlAttributeStar 
TableTransient <-  &{ accept(ParserAtoms.TABLE) } TableBody
BlockStopperNextTableElement <-    &{ inScope(ParserScopes.TABLE_ELEMENTS) ||       inScope(ParserScopes.TABLE_CELL) }         pExtSpaceStar [|!]
Table TableBody <-    TableHead pEol TableContentStar pExtSpaceStar "|}"?    {    }  / TableHead Eof    {    }
  / &ShouldNotBeHere SanityCheckEnd {   }
TableHead <-  pExtSpaceStar "{|" TableAttributeStar pExtSpaceStar  {  }
TableContentStar <-  { }  InlineBlockContent TableElement*  {  }
TableElement <-    &TableElementPrefix ( TableCaption / TableRow / TableCell / TableHeader )  / &( TableDoneSanityCheck / ShouldNotBeHere ) SanityCheckEnd
TableElementPrefix <-    pExtSpaceStar "|+"  / pExtSpaceStar "|-"  / pExtSpaceStar "|" !"}"  / pExtSpaceStar "!"
TableDoneSanityCheck <-  pExtSpaceStar ( "|}" / "|" / Eof )

LinkTarget <-  LinkTargetString  {  }
LinkTargetString <- "TODO"
#LinkTargetString <-  ( ![\u0000-\u001F] ![\u007F\uFFFD<>{}|[\]] _ )+
ExternalLinkTransient <-    '[' &{ accept(ParserAtoms.EXTERNAL_LINK) } ExternalLinkChoice  / '['    {    }
InlineContentStopperExternalLink <-  &{ inScope(ParserScopes.EXTERNAL_LINK_TITLE) } ']'
ExternalLinkChoice <-    pTpStar Url pExtSpacePlus ExternalLinkTitleContentPlus ']'    {   } / pTpStar Url pSpaceStar ']'   {    }  / &{ isWarningsEnabled() } ExternalLinkAutoCorrect
ExternalLinkAutoCorrect <-    &{  } pTpStar Url    {    }  / &{  } &( pTpStar Url )    {    }  / &{  }    {    }
ExternalLinkTitleContentPlus <-  {    enter(ParserScopes.EXTERNAL_LINK_TITLE)  }  InlineContentPlus
SectionsTransient <-  &{ accept(ParserAtoms.SECTIONS) } Section Section*  {  }
InlineContentStopperHeading <-  &{ inScope(ParserScopes.SECTION_HEADING) } EqualsStr pExtSpaceStar slEolOrEof
BlockStopperNextSection <-  &{ inScope(ParserScopes.SECTION_BODY) } Heading
Section <-    Heading Eof  / Heading SectionContentStar    {   }
HeadingTransient <-  pTpStar EqualsStr HeadingContentStarEqualsStr pExtSpaceStar &slEolOrEof  {  }
EqualsStr <- "="+ 
HeadingContentStar <-  {    enter(ParserScopes.SECTION_HEADING)  }  InlineContentPlus
SectionContentStar <-  {    enter(ParserScopes.SECTION_BODY)  }  BlockContent
TableHeaderTransient <-    &( pExtSpaceStar '!' ) TableInlineHeaderPlus TableBlockHeader?   {
    }  / &( pExtSpaceStar '!' ) TableBlockHeader    {    }
InlineContentStopperTableHeader <-  &{ inScope(ParserScopes.TABLE_INLINE_HEADER) } ( "!!" / "||" )


BlockContentStar <-  {  }  BlockContent

Garbage <-  &"||" GarbageStar ( pEol / pEof )  {  }
GarbageStar <-  ( !( slEol pExtSpaceStar [|!] ) _ )*
FollowUpSanityCheck <-  ExpectedFollowUp / ShouldNotBeHere
ExpectedFollowUp <-  pExtSpaceStar ( "!" / "|+" / "|-" / "|}" / "|" / Eof )


HorizontalRuleTransient <-    "---" &{ accept(ParserAtoms.HORIZONTAL_RULE) } HorizontalRuleChoice  / "---"    {    }
HorizontalRuleChoice <-    '-'+    {    }  / &{ isWarningsEnabled() } HorizontalRuleAutoCorrect
HorizontalRuleAutoCorrect <-  &{  }  {  }
TableAttributeStar <- XmlAttributeStar 
TableRowTransient <-  pExtSpaceStar "|-" TableAttributeStar TableRowBody  {  }
TableRowBody <-    pExtSpaceStar pEol TableRowContentStar    {    }  / pExtSpaceStar Eof    {    }  / &ShouldNotBeHere SanityCheckEnd    {    }
TableRowContentStar <-  {    enter(ParserScopes.TABLE_ELEMENTS)  }  BolBlockContent TableRowElement*  {  }
TableRowElement <-    &TableRowElementPrefix ( TableCell / TableHeader )  / &( RowDoneSanityCheck / ShouldNotBeHere ) SanityCheckEnd
TableRowElementPrefix <-    pExtSpaceStar "|" ![+}\-]  / pExtSpaceStar "!"
RowDoneSanityCheck <-  pExtSpaceStar ( "|+" / "|-" / "|}" / Eof )

ParserEntityXmlCommentOrIgnore <-  ParserEntity &{ isXmlCommentOrIgnored(yyValue) }
MagicWord <-    "__" MagicWordChoice  / "__"    {    }
MagicWordChoice <-    Word "__"    {    }  / &{ isWarningsEnabled() } MagicWordAutoCorrect
MagicWordAutoCorrect <-    &{ } Word '_'    {    }  / &{ isWarningLevelEnabled(W2S_NORMAL) } WordString "__"    {
    }  / &{ isAutoCorrect(W2S_INFO) } Word    {    }  / &{  } &WordString    {    }
Word <-  WordString &{ isMagicWord(yyValue) }
pSlEol        <- "\r\n"                                     / "\r"                                / "\n"
#pSlEol        <- "\r\n"     / "\r"
#                              / "\n"
                                # / "\u2028"
                                # / "\u2029"
                                # / "\u000B"
                                # / "\u000C"
                                # / "\u0085" 
#      slEol       <- "\r\n"     // <S>tate<L>ess
#                                / '\r'
#                                / '\n'
                                # / '\u2028'
                                # / '\u2029'
                                # / '\u000B'
                                # / '\u000C'
                                # / '\u0085' 


slEol         <- "\r\n"                                     / '\r'                                / '\n'
slEolOrEof    <- slEol                                / Eof 
pTpStar <- ptTpStar 
pTpPlus <- ptTpPlus 
ptTpStar <-  pTransparent*  {  }
ptTpPlus <-  pTransparent+  {  }
pTransparent <-  ParserEntityXmlCommentOrIgnore
pExtSpaceStar <- ptExtSpaceStar 
pExtSpacePlus <- ptExtSpacePlus 
ptExtSpaceStar <- pExtSpaceAtom*  {  }
ptExtSpacePlus <-  pExtSpaceAtom+  {  }
pExtSpaceAtom <-    pSpacePlus    {    }  / pTransparent
pExtWsStarTransient <-  pExtSpaceStar pExtWsAtom*  {  }
pExtWsPlusTransient <-    pExtSpacePlus pExtWsAtom*    {    }  / pExtWsAtom+    {    }
pExtWsAtom <-    pWsPlus    {    }  / pTransparent
InternalLinkTransient <-    "[[" &{ accept(ParserAtoms.INTERNAL_LINK) } InternalLinkChoice  / "["    {    }
InlineContentStopperInternalLink <-    &{ inScope(ParserScopes.INTERNAL_LINK_ALT)   } ( "]]" / "[[" InternalLinkChoice / '|' )  / &{ inScope(ParserScopes.INTERNAL_LINK_TITLE) } ( "]]" / "[[" InternalLinkChoice )  / &{ inScope(ParserScopes.IMAGE_LINK_ALT)      } ( "]]" / '|' )  / &{ inScope(ParserScopes.IMAGE_LINK_TITLE)    } ( "]]" )

InternalLinkAutoCorrect <-    &{ isAutoCorrect(W2S_INFO) }    pTpStar LinkTargetString    {    }    &{ isValidTarget() }    {    }  / &{ isWarningLevelEnabled(W2S_INFO) }    &( pTpStar LinkTargetString       {        getState().initLinkBuilder(target)       }       &{ isValidTarget() }     )    {    }  / &{  }    {    }
NodeList OptionsAndTitle <-    &{ !isImageTarget() } LinkTitle?    {    }  / LinkOptionStar LinkTitle?
LinkOptionStar <-  ( '|' LinkOptionChoice )*  {  }
LinkOptionChoice <-    LinkOptionResize    &( '|' / "]]" )  / LinkOptionKeyword   &( '|' / "]]" )  / LinkOptionNameValue
  / LinkOptionGarbage   &'|'
LinkOptionResize <-    pExtWsStar DigitPlus pSpaceStar "px" pExtWsStar    {    }  / pExtWsStar DigitPlus 'x' DigitPlus? pSpaceStar "px" pExtWsStar    {    }  / pExtWsStar 'x' DigitPlus pSpaceStar "px" pExtWsStar    {    }
LinkOptionKeyword <-   pExtWsStar LinkOptionKeywordString &{ getLinkBuilder().addKeyword(keyword) } pExtWsStar  {  }
LinkOptionKeywordString <-  [A-Za-z]+
LinkOptionNameValue <-    pExtWsStar "link=" LinkTargetOverride pExtWsStar    {    }  / pExtWsStar "alt="    {
    }    LinkTitleContentStar    {    }
LinkTargetOverride <-    Url  / LinkTarget
LinkOptionGarbage LinkOptionGarbage <-  {    enter(isImageTarget() ?        ParserScopes.IMAGE_LINK_ALT :        ParserScopes.INTERNAL_LINK_ALT)  }  LinkTitleContentStar  {  }
LinkTitle <-  {  }  '|' LinkTitleContentStar  {  }
LinkTitleContentStar <-  InlineBlockContent
Signature <-    "~~" SignatureChoice  / "~~"    {   }
SignatureChoice <-   ( "~~~" / "~~" / "~" ) TooManyTildesWarning?    {    }  / &{ isWarningsEnabled() } SignatureAutoCorrect
SignatureAutoCorrect <-  &{  }  {  }
TooManyTildesWarning <-  &{  } &'~'+  { }
BolBlockContent <-  Block*  {  }
BlockContent <-  Paragraph Block*  {  }
Block <-  !BlockStopper ( LineStartProd / Paragraph )
BlockStopper <-    BlockStopperNextSection  / BlockStopperNextTableElement
LineStartProd <-    &( pExtSpaceStar "{|"  ) Table  / &( pTpStar       "---" ) HorizontalRule  / &( pTpStar       [*#:] ) List  / &( pTpStar       [ ]   ) SemiPre  / &( pTpStar       [=]   ) Sections



#ParagraphTransient <-    PreParaWs !ParagraphStopper ParagraphText PostParaWs?    {    }  / PreParaWs  / ParagraphText PostParaWs?    {    }
ParagraphStopper <-    LineStartProd  / BlockStopper
PreParaWs <-  pExtSpaceStar pEol PreParaWsMore* {  }
PreParaWsMore <-  !ParagraphStopper pExtSpaceStar pEol  {  }
ParagraphText <-  InlineContentPlus ParagraphTextMore*  {  }
ParagraphTextMore <-  pEol !ParagraphStopper pExtSpaceStar InlineContentPlus  {  }
PostParaWs <-  pEol PostParaWsMore*  {  }
PostParaWsMore <-  !ParagraphStopper pExtSpaceStar pEol  {   }
InlineBlockContent <- ( !BlockStopper InlineTextBlock )? InlineBlock* { }
InlineBlock <-  !BlockStopper ( LineStartProd / InlineTextBlock )
InlineTextBlock <-    InlineContentPlus InlineTextBlockMore*    {    } / InlineTextBlockMore+    { }
InlineTextBlockMore <-     pEol ( !ParagraphStopper InlineContentPlus )?  {  }

InlineContentPlus <-  InlineContentChoice+  { }
InlineContentChoice <-    TextPlus ':' UrlPathString     {    }  / TextPlus &"[[" !InlineContentStopper InternalLink    {    }  / TextPlus  / !InlineContentStopper InlineContentAtom  / !InlineContentStopper TextStopperPrefix    {    }
InlineContentAtom <-    &"~~"     Signature  / &"[["     InternalLink  / &"["      ExternalLink  / &"''"     Ticks  / &"__"     MagicWord  / &"<"      XmlElement  / &"&"      XmlReference  #/ &"\uE000" ParserEntity
InlineContentStopper <-    slEol  / InlineContentStopperExternalLink  / InlineContentStopperInternalLink  / InlineContentStopperHeading  / InlineContentStopperTableHeader  / InlineContentStopperTableCell
TextPlus <-  TextPlusStr  {  }
TextPlusStr <- ( !TextStopperPrefix _ )+ 
TextStopperPrefix <-    pSlEol  / "="     / "|"               / "!"    / "]"     / ":"     / ":"               / "~~"             / "["               / "''"              / "__"              / "<"               / "&"               #/ "\uE000"        
#XmlElementClose <-    XmlName pWsStar '>'    {    }
#XmlElementOpen <-    XmlName AttributeStar pWsStar "/>"    {    }  / XmlName AttributeStar pWsStar '>'    {    }
AttributeStar <-  (&pWsPlus XmlAttributePlus)?  {  }
#TableCellTransient <-    &( pExtSpaceStar '|' ) TableInlineCellPlus TableBlockCell?    {    }  / &( pExtSpaceStar '|' ) TableBlockCell    {    }
InlineContentStopperTableCell <- &{ inScope(ParserScopes.TABLE_INLINE_CELL) } "||"
TableInlineCellPlus <-  ( TableInlineCell &"||" )+  {  }

TableBlockCell <-  pExtSpaceStar ( "||" / "|" ) Attributes BlockContentStar &FollowUpSanityCheck  {  }


XmlAttributeStar <-  tXmlAttributePlus?  {      }
XmlAttributePlus <- tXmlAttributePlus 
XmlAttrGarbageStopper <-    <SlashGreater> "/>"  / <Greater>      '>'  / <Less>         '<'
XmlAttrValueStopper <-    <SlashGreater> "/>"  / <Greater>      '>'  / <Less>         '<'
XmlAttrWs <-    <Whitespace>   pWsPlus
tXmlAttributePlus <-  XmlHeadAttributeChoice XmlTailAttributeChoice*  {  }
XmlHeadAttributeChoice <-    ValidXmlAttribute  / XmlAttributeGarbage
XmlTailAttributeChoice <-    &XmlAttrWs ValidXmlAttribute  / XmlAttributeGarbage
XmlAttributeGarbage <-  GarbageString  { }
GarbageString <-  ( !GarbageStringStopper _ )+
GarbageStringStopper <-  XmlAttrWs? XmlAttrGarbageStopper  / XmlAttrWs ValidXmlAttribute
ValidXmlAttribute <-    XmlAttrWs? XmlName XmlAttrWs? '=' XmlAttrWs? ['] ValueSqStar ['] &AttrEnd    {    }  / XmlAttrWs? XmlName XmlAttrWs? '=' XmlAttrWs? '"' ValueDqStar '"' &AttrEnd    {    }  / XmlAttrWs? XmlName XmlAttrWs? '=' ValueNqStar &AttrEnd    {    }  / XmlAttrWs? XmlName &AttrEnd    {    }
AttrEnd <-    XmlAttrWs  / XmlAttrValueStopper  / Eof
ValueSqStar <-  ValueSqChoice*  {  }
ValueSqChoice <-    ValueSqString    {    }  / &'&' XmlReference
ValueSqString <-  ( !XmlAttrValueStopper ![<\'&] _ )+ # TODO Charclass
ValueDqStar <-  ValueDqChoice*  {  }
ValueDqChoice <-    ValueDqString    {    }  / &'&' XmlReference
ValueDqString <-  ( !XmlAttrValueStopper ![<\"&] _ )+
ValueNqStar <-  ValueNqChoice*  {  }
ValueNqChoice <-    ValueNqString    {  }  / &'&' XmlReference
ValueNqString <-  ( !XmlAttrValueStopper [a-zA-Z0-9!#$%()*,\-./:;<?@[\]^_`{|}~] )+
#IntegerLiteral <- HexNumeral / OctalNumeral / DecimalNumeral 
#HexNumeral     <- '0' [xX] HexDigitPlus 
#OctalNumeral   <- '0' OctalDigit+ 
DecimalNumeral <- '0' / NonZeroDigit DigitStar 
DigitStar      <- Digit* 
DigitPlus      <- Digit+ 
#HexDigitStar   <- HexDigit* 
HexDigitPlus   <- HexDigit+ 
#HexQuad        <- HexDigit HexDigit HexDigit HexDigit 
HexDigit       <- [0-9a-fA-F] 
#OctalDigit     <- [0-7] 
NonZeroDigit   <- [1-9] 
Digit          <- [0-9] 
#SanityCheckEnd <-  { } &{  } 
#SanityCheckAccept <- { yyValue = null; } 
ShouldNotBeHere <- ThrowShouldNotBeHereException 
ThrowShouldNotBeHereException <-  ErrorContextString  {  }
ErrorContextString <-  (_(_(_(_(_(_(_(_(_(_(_(_(_(_(_(_)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?)?
XmlReference <-    '&' XmlReferenceChoice  / '&'    {    }
XmlReferenceChoice <-    "#" XmlCharRefChoice  /     XmlEntityRefChoice  / &{ isWarningsEnabled() }        XmlReferenceAutoCorrect
XmlReferenceAutoCorrect <-  &{  }  {   }
XmlCharRefChoice <-    'x' HexDigitPlus ';'    {    }  / DigitPlus ';'    {    }
XmlEntityRefChoice <-    XmlName ';'    {    }
pSpaceStar     <- pSpace* 
pSpacePlus     <- pSpace+ 
pSpace         <- ' '     / '\t'     / '\f' 
pWsStar       <- pWhitespace* 
pWsPlus       <- pWhitespace+ 
pWhitespace   <- pSpace    / pEol 
pEol          <- "\r\n"  / "\r"  / "\n"
#                                / "\u2028"
#                                / "\u2029"
#                                / "\u000B"
#                                / "\u000C"
#                                / "\u0085" 
pEof          <- !_ 
#pEolOrEof     <- pEol / pEof 
#SpaceStar        <- Space* 
#SpacePlus        <- Space+ 
#Space            <- ' '  / '\t'    / '\f' 
#WsStar           <- Ws* 
#pWsPlus           <- Ws+ 
#Ws               <- Space      / Eol

#wikitext/lazy/parser/Whitespace.rats:          void    Eol          := <DUMMY> &{ acceptEol() } slEol ;
#Eol          <- slEol
 
XmlName <- tXmlName 
tXmlName <- XmlNameStartChar XmlNameChar* 
XmlNameStartChar <-
    [A-Za-z:_]
#  / [\u00C0-\u00D6]
#  / [\u00D8-\u00F6]
#  / [\u00F8-\u02FF]
#  / [\u0370-\u037D]
#  / [\u037F-\u1FFF]
#  / [\u200C-\u200D]
#  / [\u2070-\u218F]
#  / [\u2C00-\u2FEF]
#  / [\u3001-\uD7FF]
#  / [\uF900-\uFDCF]
#  / [\uFDF0-\uFFFD]
XmlNameChar <-
    XmlNameStartChar
  / [0-9\-.]
#  / [\u00B7]
#  / [\u0300-\u036F]
#  / [\u203F-\u2040]


TableInlineHeaderPlus <-
  ( TableInlineHeader &( "||" / "!!" ) )+
  {
  }


TableBlockHeader <-
  pExtSpaceStar ( "!!" / "||" / "!" ) Attributes BlockContentStar &FollowUpSanityCheck
  {
  }



Attributes <-
    &AttrPossible TableAttributeInlineStar pExtSpaceStar '|' !'|'
    {
    }
  / {
    }


Ticks Ticks <-
  "''" '\''*
  {
  }


WordString <-
  ( '-'
  / [A-Z]
  / [a-z]
  / [0-9]
  # / [\u00B7]
  # / [\u00C0-\u00D6]
  # / [\u00D8-\u00F6]
  # / [\u00F8-\u02FF]
  # / [\u0370-\u037D]
  # / [\u037F-\u1FFF]
  # / [\u200C-\u200D]
  # / [\u2070-\u218F]
  # / [\u2C00-\u2FEF]
  # / [\u3001-\uD7FF]
  # / [\uF900-\uFDCF]
  # / [\uFDF0-\uFFFD]
  # / [\u0300-\u036F]
  # / [\u203F-\u2040]
  )+

#Todo rename the inline content stars with the right stuff
InlineContentStar <-  {    enter(ParserScopes.TABLE_INLINE_HEADER)  }  InlineContentPlus
#InlineContentStar2 <-  {    enter(ParserScopes.TABLE_INLINE_CELL)  }  InlineContentPlus
#InlineContentStar3 <-  InlineContentChoice*  {  }
#InlineContentStar4 <-  {    enter(ParserScopes.TABLE_INLINE_CELL)  }  InlineContentPlus
#InlineContentStar5 <-  {  }  InlineContentPlus

SemiPreContentStar <-  { }  InlineContentStar
ListItemContentStar <-  {    enter(ParserScopes.LIST_ITEM)  }  InlineContentStar
#transientTableCaptionTransient <-    pExtSpaceStar "|+" Attributes InlineContentStar Garbage &FollowUpSanityCheck    {    }  / pExtSpaceStar "|+" Attributes BlockContentStar &FollowUpSanityCheck    {    }
TableInlineCell <-  pExtSpaceStar ( "||" / "|" ) Attributes InlineContentStar  {  }
TableInlineHeader <-  pExtSpaceStar ( "!!" / "||" / "!" ) Attributes InlineContentStar  {  }



AttrPossible <-  ( ![<|] !"[[" !"!!" !slEol _ )* ( ( '|' !'|' ) / ( '!' !'!' ) )
#AttrPossible2 <-  ( ![<|] !"[[" !slEol _ )* '|' !'|'
#AttrPossible3 <-  ( ![<|] !"[[" !slEol _ )* '|' !'|'
#AttrPossible4 <-  ( ![<|] !"[[" !"!!" !slEol _ )* ( ( '|' !'|' ) / ( '!' !'!' ) )
#AttrPossible5 <-  ( ![<|] !"[[" !slEol _ )* '|' !'|'



ContentStringStopper <-   <PrefixOnlyInclude>    ...  / <PrefixPipe>           '|'  / <PrefixEquals>         '='  / <PrefixClosingBraces>  "}}"
#TODO:ContentStringStopperOpen <- <PrefixOnlyInclude> '<'   / <PrefixXmlElement>  '<'  / <PrefixTemplate>    "{{"  / <PrefixIntLink>     "[["
#TODO:ContentStringStopperCloseBrace <- ContentStringStopper    <PrefixOnlyInclude>    ...  / <PrefixClosingBraces>  "]]"


ParserEntity <-DecimalNumeral
# TODO  ParserEntity <- '\uE000' DecimalNumeral '\uE001'

Less<- 
PrefixClosingBraces<- 
PrefixEquals<- 
PrefixPipe<- 
PrefixOnlyInclude<- 
Whitespace<- 
SlashGreater<- 
Heading<- 
# not defined at all
ExternalLink<-


#PrefixIntLink <- "TODO"
#PrefixTemplate <- "TODO"
#PrefixXmlElement<- "TODO"
#TableRowMemoized<- "TODO"
# ExternalLinkMemoized<- "TODO"
# Heading<- "TODO"
 HeadingContentStarEqualsStr<- "TODO"
# HeadingMemoized<- "TODO"
# HorizontalRuleMemoized<- "TODO"
IgnoredClosingTag<- "TODO"
IntLink<- "TODO"
# InternalLinkMemoized<- "TODO"
# ParagraphMemoized<- "TODO"
SanityCheckEnd<- "TODO"
# SectionsMemoized<- "TODO"
SemiPre<- "TODO"
# SemiPreMemoized<- "TODO"
Table<- "TODO"
# TableCaptionMemoized<- "TODO"
# TableCaptionTransient<- "TODO"
# TableCellMemoized<- "TODO"
# TableHeaderMemoized<- "TODO"
# TableMemoized<- "TODO"




Text<- "TODO"
XmlCommentContent<- "TODO"
# todo another funky
## These rules are defined in java...
#LinkPostfix <- 
#ListMemoized <-
#pExtWsStarMemoized <-
Eof<- 
HorizontalRule<- 
InternalLinkChoice<- 
List <-  
NodeList<- 
Paragraph<-
Sections<- 
TableCaption<-
TableCell<- 
TableHeader<- 
TableRow<-
Template<- "TODO"
pExtWsStar <- 

_ <- # TODO
## not used, yet
#statefulInternalLinkChoice <-    pTpStar LinkTargetString pExtSpaceStar    {    }    &{ isValidTarget() } OptionsAndTitle "]]" LinkPostfix?    {    }  / &{ isWarningsEnabled() } InternalLinkAutoCorrect

#grmbl <-  ListMemoized              InternalLinkMemoized      TableMemoized  ListTransient             InternalLinkTransient     TableTransient  TableCaptionMemoized      TableRowMemoized          TableHeaderMemoized  TableCaptionTransient     TableRowTransient         TableHeaderTransient  TableCellMemoized         pExtWsStarMemoized        ListMemoized  TableCellTransient        pExtWsStarTransient       ListTransient  SemiPreMemoized           SectionsMemoized          HeadingMemoized  SemiPreTransient          SectionsTransient         HeadingTransient  HorizontalRuleMemoized    ExternalLinkMemoized      ParagraphMemoized  HorizontalRuleTransient   ExternalLinkTransient     ParagraphTransient
#statefulTemplate <-    Braces1Plus    {      getState().setTemplateBraces(braces.length())    }    TemplateTail  / Braces1Plus    {    }


# rule 'TableBlockCell' defined but not used
# rule 'TableInlineCellPlus' defined but not used
# rule 'AttributeStar' defined but not used
# rule 'PostParaWs' defined but not used
# rule 'ParagraphText' defined but not used
# rule 'PreParaWs' defined but not used
# rule 'OptionsAndTitle' defined but not used
# rule 'InternalLinkAutoCorrect' defined but not used
# rule 'InternalLinkTransient' defined but not used
# rule 'pExtWsPlusTransient' defined but not used
# rule 'pExtWsStarTransient' defined but not used
# rule 'pTpPlus' defined but not used
# rule 'TableRowTransient' defined but not used
# rule 'HorizontalRuleTransient' defined but not used
# rule 'Garbage' defined but not used
# rule 'TableHeaderTransient' defined but not used
# rule 'HeadingContentStar' defined but not used
# rule 'HeadingTransient' defined but not used
# rule 'SectionsTransient' defined but not used
# rule 'ExternalLinkTransient' defined but not used
# rule 'TableTransient' defined but not used
# rule 'ListTransient' defined but not used
# rule 'SemiPreTransient' defined but not used
# rule 'TemplateTail' defined but not used
# rule 'Braces1Plus' defined but not used
